---
import '../styles/global.css'
import { ViewTransitions } from 'astro:transitions'
import ThemeManagementIsland from '../components/ThemeManagementIsland.astro'
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro + Basecoat UI Demo</title>
		<ViewTransitions />
		
		<!-- FOUC Prevention - visibility hidden method -->
		<style>
			/* Hide body until CSS is loaded to prevent flash */
			body {
				visibility: hidden;
				opacity: 0;
			}
			
			/* Basic fallback variables - overridden by theme manager */
			:root {
				--font-sans: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif;
			}
		</style>
		
		<!-- Unified ThemeCore Initialization - Optimized for Astro -->
		<script is:inline type="module">
			(async function() {
				try {
					console.log('üé® Initializing ThemeCore (Astro Layout)...');
					
					const { ThemeCore } = await import('@mks2508/shadcn-basecoat-theme-manager');
					
					// Unified initialization with Astro-optimized configuration
					await ThemeCore.init({
						debug: true,
						fouc: {
							prevent: true,
							method: 'auto', // Auto-detect based on document ready state
							revealDelay: 50 // Small delay for Astro hydration
						}
						// Optional: Add default configuration
						// defaults: {
						//   theme: 'default',
						//   mode: 'auto',
						//   fonts: {
						//     sans: 'Inter',
						//     serif: 'Georgia', 
						//     mono: 'JetBrains Mono'
						//   }
						// }
					});
					
					console.log('‚úÖ ThemeCore initialized successfully');
					
					// Astro-specific: Reinitialize on page navigation
					document.addEventListener('astro:page-load', async function() {
						console.log('üîÑ Astro page load - reapplying theme...');
						// ThemeCore will handle FOUC prevention automatically
						try {
							const instance = ThemeCore.getInstance();
							if (instance) {
								// Reapply current theme for new page
								const currentTheme = instance.themeManager.getCurrentTheme();
								if (currentTheme) {
									await instance.themeManager.setTheme(currentTheme);
								}
							}
						} catch (error) {
							console.warn('‚ö†Ô∏è Failed to reapply theme on page load:', error);
						}
					});
					
				} catch (error) {
					console.error('‚ùå Failed to initialize ThemeCore:', error);
					
					// Fallback: basic FOUC prevention if ThemeCore fails
					try {
						const savedTheme = localStorage.getItem('theme-current') || 'default';
						const savedMode = localStorage.getItem('theme-mode') || 'auto';
						
						let resolvedMode = savedMode;
						if (savedMode === 'auto') {
							resolvedMode = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
						}
						
						document.documentElement.setAttribute('data-theme', savedTheme);
						document.documentElement.setAttribute('data-mode', resolvedMode);
						document.documentElement.classList.toggle('dark', resolvedMode === 'dark');
						
						// Reveal body
						document.body.style.visibility = 'visible';
						document.body.style.opacity = '1';
						
					} catch (fallbackError) {
						console.error('‚ùå Fallback FOUC prevention also failed:', fallbackError);
						// Last resort: just reveal the body
						document.body.style.visibility = 'visible';
						document.body.style.opacity = '1';
					}
				}
			})();
		</script>
		
		<!-- Basecoat JavaScript (all components included) -->
		<script is:inline src="https://cdn.jsdelivr.net/npm/basecoat-css@0.3.2/dist/js/all.min.js" defer></script>
	</head>
	<body>
		<slot />
		
		<!-- Toast container for Basecoat toasts -->
		<div id="toaster" class="toaster" data-align="end"></div>
		
		<!-- Theme Management Modal Island -->
		<ThemeManagementIsland />
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
