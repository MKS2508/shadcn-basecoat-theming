---
import Layout from '../layouts/Layout.astro';
import ThemeSelector from '../components/ThemeSelector.astro';
import SimpleBenchmark from '../components/SimpleBenchmark.astro';
import ProfessionalBenchmark from '../components/ProfessionalBenchmark.astro';

// Import all UI components from the NPM package
import {
  // Form Controls
  Button, Input, Label, Select, Textarea, Checkbox, Switch, RadioGroup, Toggle,
  // Display
  Card, Alert, Badge, Avatar, Progress, Skeleton, Toast, Breadcrumb,
  // Navigation
  Tabs, Accordion, DropdownMenu, Table,
  // Overlays
  AlertDialog, Modal, Popover, Tooltip,
  // Icons
  SunIcon, MoonIcon, MonitorIcon
} from '@mks2508/basecoat-astro-components';

// Kitchen Sink sections
const kitchenSinkSections = [
  { id: 'form-controls', label: 'Form Controls' },
  { id: 'display', label: 'Display' },
  { id: 'navigation', label: 'Navigation' },
  { id: 'overlays', label: 'Overlays' }
];

// Data for examples
const selectOptions = [
  { value: 'apple', label: 'Apple' },
  { value: 'banana', label: 'Banana' },
  { value: 'orange', label: 'Orange' }
];

const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Library', href: '/library' },
  { label: 'Components', href: '/library/components' },
  { label: 'Breadcrumb' }
];
---

<Layout title="Basecoat UI Kitchen Sink">
	<!-- Header with theme controls -->
	<header class="sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
		<div class="container mx-auto px-4 flex h-16 items-center justify-between max-w-7xl">
			<div class="flex items-center space-x-4">
				<h1 class="text-xl font-bold text-foreground">Basecoat UI Demo</h1>
				<span class="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full font-medium">
					Tailwind v4 + Core Package
				</span>
			</div>
			
			<!-- Theme Controls -->
			<div class="flex items-center space-x-3">
				<!-- Theme selector -->
				<ThemeSelector />

				<!-- Mode toggle button -->
				<button 
					type="button"
					id="mode-toggle"
					class="inline-flex items-center justify-center rounded-md border border-input bg-background w-10 h-10 text-sm ring-offset-background transition-colors hover:bg-accent hover:text-accent-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 cursor-pointer"
					aria-label="Toggle light/dark mode"
					title="Toggle light/dark mode"
				>
					<SunIcon id="light-icon" />
					<MoonIcon id="dark-icon" class="hidden" />
					<MonitorIcon id="auto-icon" class="hidden" />
				</button>
			</div>
		</div>
	</header>

	<main class="container mx-auto px-4 py-8 max-w-7xl">
		<div class="mb-8">
			<h2 class="text-3xl font-bold text-foreground mb-2">
				üçΩÔ∏è Basecoat UI Kitchen Sink
			</h2>
			<p class="text-lg text-muted-foreground">
				Comprehensive showcase of all 24 Basecoat UI components organized by category
			</p>
		</div>

		<!-- Performance Benchmarks -->
		<div class="benchmark-grid">
			<SimpleBenchmark />
			<ProfessionalBenchmark />
		</div>

		<Tabs id="kitchen-sink-tabs" tabs={kitchenSinkSections}>
			<!-- Form Controls Tab -->
			<div role="tabpanel" id="kitchen-sink-tabs-panel-1" aria-labelledby="kitchen-sink-tabs-tab-1" tabindex="-1" aria-selected="true" class="mt-6">
				<div class="grid gap-8">
					<div class="space-y-6">
						<h2 class="text-2xl font-semibold">Form Controls</h2>
						<p class="text-muted-foreground">Interactive components for user input and form handling</p>
						
						<div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
							<!-- Buttons -->
							<Card title="Buttons" class="p-6">
								<div class="space-y-3">
									<Button variant="primary">Primary</Button>
									<Button variant="secondary">Secondary</Button>
									<Button variant="outline">Outline</Button>
									<Button size="sm">Small</Button>
									<Button size="lg">Large</Button>
								</div>
							</Card>

							<!-- Inputs & Labels -->
							<Card title="Input Fields" class="p-6">
								<div class="space-y-4">
									<div>
										<Label for="email">Email Address</Label>
										<Input id="email" type="email" placeholder="Enter your email" />
									</div>
									<div>
										<Label for="password">Password</Label>
										<Input id="password" type="password" placeholder="Enter password" />
									</div>
								</div>
							</Card>

							<!-- Select -->
							<Card title="Select Dropdown" class="p-6">
								<div class="space-y-4">
									<Label for="fruit">Choose a fruit</Label>
									<Select id="fruit" options={selectOptions} placeholder="Select fruit..." />
								</div>
							</Card>

							<!-- Textarea -->
							<Card title="Textarea" class="p-6">
								<div class="space-y-4">
									<Label for="message">Message</Label>
									<Textarea id="message" placeholder="Enter your message..." rows={4} />
								</div>
							</Card>

							<!-- Checkboxes -->
							<Card title="Checkboxes" class="p-6">
								<div class="space-y-3">
									<Checkbox id="terms" label="Accept terms and conditions" />
									<Checkbox id="newsletter" label="Subscribe to newsletter" checked />
									<Checkbox id="marketing" label="Receive marketing emails" />
								</div>
							</Card>

							<!-- Switches -->
							<Card title="Switches" class="p-6">
								<div class="space-y-3">
									<Switch id="notifications" label="Enable notifications" />
									<Switch id="dark-mode" label="Dark mode" checked />
									<Switch id="auto-save" label="Auto-save changes" />
								</div>
							</Card>

							<!-- Radio Groups -->
							<Card title="Radio Groups" class="p-6">
								<div class="space-y-3">
									<p class="font-medium">Payment method:</p>
									<RadioGroup name="payment" value="card" label="Credit Card" checked />
									<RadioGroup name="payment" value="paypal" label="PayPal" />
									<RadioGroup name="payment" value="bank" label="Bank Transfer" />
								</div>
							</Card>

							<!-- Toggle -->
							<Card title="Toggle" class="p-6">
								<div class="space-y-3">
									<Toggle>Toggle Button</Toggle>
									<Toggle pressed>Pressed Toggle</Toggle>
								</div>
							</Card>
						</div>
					</div>
				</div>
			</div>

			<!-- Display Tab -->
			<div role="tabpanel" id="kitchen-sink-tabs-panel-2" aria-labelledby="kitchen-sink-tabs-tab-2" tabindex="-1" aria-selected="false" class="mt-6" hidden>
				<div class="grid gap-8">
					<div class="space-y-6">
						<h2 class="text-2xl font-semibold">Display Components</h2>
						<p class="text-muted-foreground">Components for showing content, status, and visual information</p>
						
						<div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
							<!-- Cards -->
							<Card title="Sample Card" class="p-6">
								<p>This is a basic card component with title and content.</p>
								<div slot="footer">
									<Button variant="primary" size="sm">Action</Button>
									<Button variant="outline" size="sm">Cancel</Button>
								</div>
							</Card>

							<!-- Alerts -->
							<Card title="Alerts" class="p-6">
								<div class="space-y-3">
									<Alert variant="success" title="Success!" description="Operation completed successfully." />
									<Alert variant="warning" title="Warning" description="Please review your inputs." />
									<Alert variant="error" title="Error" description="Something went wrong." />
								</div>
							</Card>

							<!-- Badges -->
							<Card title="Badges" class="p-6">
								<div class="space-y-3">
									<div class="flex flex-wrap gap-2">
										<Badge variant="primary">Primary</Badge>
										<Badge variant="secondary">Secondary</Badge>
										<Badge variant="success">Success</Badge>
										<Badge variant="warning">Warning</Badge>
										<Badge variant="error">Error</Badge>
									</div>
								</div>
							</Card>

							<!-- Avatars -->
							<Card title="Avatars" class="p-6">
								<div class="space-y-3">
									<div class="flex items-center gap-3">
										<Avatar size="sm" fallback="JD" />
										<Avatar size="md" fallback="AB" />
										<Avatar size="lg" fallback="MK" />
										<Avatar size="xl" fallback="XL" />
									</div>
								</div>
							</Card>

							<!-- Progress Bars -->
							<Card title="Progress" class="p-6">
								<div class="space-y-4">
									<div>
										<p class="text-sm text-muted-foreground mb-2">Loading (25%)</p>
										<Progress value={25} max={100} />
									</div>
									<div>
										<p class="text-sm text-muted-foreground mb-2">Upload (75%)</p>
										<Progress value={75} max={100} />
									</div>
								</div>
							</Card>

							<!-- Skeletons -->
							<Card title="Loading Skeletons" class="p-6">
								<div class="space-y-3">
									<Skeleton class="h-4 w-full bg-muted rounded" />
									<Skeleton class="h-4 w-3/4 bg-muted rounded" />
									<Skeleton class="h-8 w-1/2 bg-muted rounded" />
								</div>
							</Card>

							<!-- Toast -->
							<Card title="Toast Notifications" class="p-6">
								<div class="space-y-4">
									<p class="text-sm text-muted-foreground">Click buttons to trigger different toast notifications</p>
									<div class="flex flex-wrap gap-2">
										<button 
											class="btn-outline"
											onclick="document.dispatchEvent(new CustomEvent('basecoat:toast', {
												detail: {
													config: {
														category: 'success',
														title: 'Success!',
														description: 'Changes saved successfully.',
														duration: 3000
													}
												}
											}))"
										>
											Success Toast
										</button>
										<button 
											class="btn-outline"
											onclick="document.dispatchEvent(new CustomEvent('basecoat:toast', {
												detail: {
													config: {
														category: 'error',
														title: 'Error',
														description: 'Something went wrong. Please try again.',
														duration: 5000
													}
												}
											}))"
										>
											Error Toast
										</button>
										<button 
											class="btn-outline"
											onclick="document.dispatchEvent(new CustomEvent('basecoat:toast', {
												detail: {
													config: {
														category: 'warning',
														title: 'Warning',
														description: 'Please review your inputs before proceeding.'
													}
												}
											}))"
										>
											Warning Toast
										</button>
										<button 
											class="btn-outline"
											onclick="document.dispatchEvent(new CustomEvent('basecoat:toast', {
												detail: {
													config: {
														category: 'info',
														title: 'Info',
														description: 'This is an informational message.'
													}
												}
											}))"
										>
											Info Toast
										</button>
									</div>
									<!-- Example static toast for reference -->
									<div class="border-t pt-4">
										<p class="text-xs text-muted-foreground mb-2">Example static toast (server-rendered):</p>
										<Toast category="success" title="Static Toast" description="This is a server-rendered toast for demonstration." />
									</div>
								</div>
							</Card>

							<!-- Breadcrumbs -->
							<Card title="Breadcrumbs" class="p-6">
								<div class="space-y-3">
									<Breadcrumb items={breadcrumbItems} />
								</div>
							</Card>
						</div>
					</div>
				</div>
			</div>

			<!-- Navigation Tab -->
			<div role="tabpanel" id="kitchen-sink-tabs-panel-3" aria-labelledby="kitchen-sink-tabs-tab-3" tabindex="-1" aria-selected="false" class="mt-6" hidden>
				<div class="grid gap-8">
					<div class="space-y-6">
						<h2 class="text-2xl font-semibold">Navigation Components</h2>
						<p class="text-muted-foreground">Components for organizing and navigating through content</p>
						
						<div class="grid md:grid-cols-2 gap-6">
							<!-- Nested Tabs (we already have one at the root level) -->
							<Card title="Nested Tabs Example" class="p-6">
								<Tabs id="nested-tabs" tabs={[
									{ id: 'account', label: 'Account' },
									{ id: 'security', label: 'Security' },
									{ id: 'notifications', label: 'Notifications' }
								]}>
									<div role="tabpanel" id="nested-tabs-panel-1" aria-labelledby="nested-tabs-tab-1" tabindex="-1" aria-selected="true" class="mt-4">
										<p>Account settings and profile information.</p>
									</div>
									<div role="tabpanel" id="nested-tabs-panel-2" aria-labelledby="nested-tabs-tab-2" tabindex="-1" aria-selected="false" class="mt-4" hidden>
										<p>Security settings and password management.</p>
									</div>
									<div role="tabpanel" id="nested-tabs-panel-3" aria-labelledby="nested-tabs-tab-3" tabindex="-1" aria-selected="false" class="mt-4" hidden>
										<p>Notification preferences and email settings.</p>
									</div>
								</Tabs>
							</Card>

							<!-- Accordion -->
							<Card title="Accordion" class="p-6">
								<Accordion title="What is Basecoat UI?" expanded>
									Basecoat UI is a modern CSS-first component library that provides beautiful, accessible components for web applications.
								</Accordion>
								<Accordion title="How do I install it?" class="mt-2">
									You can install Basecoat UI via npm or include it via CDN in your project.
								</Accordion>
								<Accordion title="Is it accessible?" class="mt-2">
									Yes! All components follow ARIA guidelines and accessibility best practices.
								</Accordion>
							</Card>

							<!-- Dropdown Menu -->
							<Card title="Dropdown Menu" class="p-6">
								<DropdownMenu 
									id="main-dropdown"
									triggerId="main-trigger" 
									triggerText="Open Menu"
									menuId="main-menu"
								>
									<div role="menuitem">
										<Button variant="ghost" class="w-full text-left">Profile</Button>
									</div>
									<div role="menuitem">
										<Button variant="ghost" class="w-full text-left">Settings</Button>
									</div>
									<div role="separator" class="border-t my-1"></div>
									<div role="menuitem">
										<Button variant="ghost" class="w-full text-left text-destructive">Logout</Button>
									</div>
								</DropdownMenu>
							</Card>

							<!-- Table -->
							<Card title="Data Table" class="p-6 md:col-span-2">
								<Table class="w-full">
									<thead>
										<tr class="border-b">
											<th class="text-left p-2">Name</th>
											<th class="text-left p-2">Email</th>
											<th class="text-left p-2">Role</th>
											<th class="text-left p-2">Status</th>
										</tr>
									</thead>
									<tbody>
										<tr class="border-b">
											<td class="p-2">John Doe</td>
											<td class="p-2">john@example.com</td>
											<td class="p-2">Admin</td>
											<td class="p-2"><Badge variant="success">Active</Badge></td>
										</tr>
										<tr class="border-b">
											<td class="p-2">Jane Smith</td>
											<td class="p-2">jane@example.com</td>
											<td class="p-2">User</td>
											<td class="p-2"><Badge variant="warning">Pending</Badge></td>
										</tr>
										<tr class="border-b">
											<td class="p-2">Mike Johnson</td>
											<td class="p-2">mike@example.com</td>
											<td class="p-2">Editor</td>
											<td class="p-2"><Badge variant="primary">Active</Badge></td>
										</tr>
									</tbody>
								</Table>
							</Card>
						</div>
					</div>
				</div>
			</div>

			<!-- Overlays Tab -->
			<div role="tabpanel" id="kitchen-sink-tabs-panel-4" aria-labelledby="kitchen-sink-tabs-tab-4" tabindex="-1" aria-selected="false" class="mt-6" hidden>
				<div class="grid gap-8">
					<div class="space-y-6">
						<h2 class="text-2xl font-semibold">Overlay Components</h2>
						<p class="text-muted-foreground">Modal dialogs, tooltips, and overlay components</p>
						
						<div class="grid md:grid-cols-2 gap-6">
							<!-- Alert Dialog Modal -->
							<Card title="Alert Dialog" class="p-6">
								<div class="space-y-4">
									<p class="text-sm text-muted-foreground">Click to open alert dialog</p>
									<button onclick="document.getElementById('example-alert-dialog').showModal()" class="btn">
										Open Alert Dialog
									</button>
									<AlertDialog id="example-alert-dialog" titleId="example-alert-dialog-title" descriptionId="example-alert-dialog-description">
										<header>
											<h2 id="example-alert-dialog-title">Are you absolutely sure?</h2>
											<p id="example-alert-dialog-description">
												This action cannot be undone. This will permanently delete your account and remove your data from our servers.
											</p>
										</header>
										<footer>
											<button class="btn-outline" onclick="document.getElementById('example-alert-dialog').close()">
												Cancel
											</button>
											<button class="btn-primary" onclick="document.getElementById('example-alert-dialog').close()">
												Continue
											</button>
										</footer>
									</AlertDialog>
								</div>
							</Card>

							<!-- Modal -->
							<Card title="Modal" class="p-6">
								<div class="space-y-4">
									<p class="text-sm text-muted-foreground">Click to open modal with different sizes</p>
									<div class="flex flex-wrap gap-2">
										<button onclick="document.getElementById('example-modal-sm').showModal()" class="btn-outline">
											Small Modal
										</button>
										<button onclick="document.getElementById('example-modal-lg').showModal()" class="btn-outline">
											Large Modal
										</button>
									</div>
									<Modal id="example-modal-sm" titleId="example-modal-sm-title" size="sm">
										<header class="border-b pb-4 mb-4">
											<h2 id="example-modal-sm-title" class="text-lg font-semibold">Small Modal</h2>
										</header>
										<div>
											<p class="text-sm text-muted-foreground mb-4">
												This is a small modal dialog for quick actions or simple forms.
											</p>
											<div class="flex gap-2 justify-end">
												<Button variant="outline" onclick="document.getElementById('example-modal-sm').close()">
													Cancel
												</Button>
												<Button variant="primary" onclick="document.getElementById('example-modal-sm').close()">
													Save
												</Button>
											</div>
										</div>
									</Modal>
									<Modal id="example-modal-lg" titleId="example-modal-lg-title" size="lg">
										<header class="border-b pb-4 mb-4">
											<h2 id="example-modal-lg-title" class="text-xl font-semibold">Large Modal</h2>
										</header>
										<div>
											<p class="text-muted-foreground mb-4">
												This is a larger modal for complex forms or detailed content.
											</p>
											<div class="space-y-4 mb-6">
												<div>
													<Label for="modal-name">Name</Label>
													<Input id="modal-name" type="text" placeholder="Enter your name" />
												</div>
												<div>
													<Label for="modal-email">Email</Label>
													<Input id="modal-email" type="email" placeholder="Enter your email" />
												</div>
												<div>
													<Label for="modal-message">Message</Label>
													<Textarea id="modal-message" placeholder="Enter your message..." rows={3} autoResize />
												</div>
											</div>
											<div class="flex gap-2 justify-end">
												<Button variant="outline" onclick="document.getElementById('example-modal-lg').close()">
													Cancel
												</Button>
												<Button variant="primary" onclick="document.getElementById('example-modal-lg').close()">
													Submit
												</Button>
											</div>
										</div>
									</Modal>
								</div>
							</Card>

							<!-- Popover -->
							<Card title="Popover" class="p-6">
								<div class="space-y-4">
									<p class="text-sm text-muted-foreground">Click to show popover</p>
									<Popover 
										id="settings-popover"
										triggerId="settings-trigger"
									>
										<span slot="trigger">Settings</span>
										<div class="space-y-3 p-4">
											<h4 class="font-medium">Quick Settings</h4>
											<div class="space-y-2">
												<Switch id="popover-notifications" label="Notifications" />
												<Switch id="popover-dark-mode" label="Dark mode" />
											</div>
											<Button variant="primary" size="sm" class="w-full">Save</Button>
										</div>
									</Popover>
								</div>
							</Card>

							<!-- Tooltips -->
							<Card title="Tooltips" class="p-6">
								<div class="space-y-4">
									<p class="text-sm text-muted-foreground">Hover over elements for tooltips</p>
									<div class="flex gap-3">
										<Tooltip text="This is a tooltip on top" side="top">
											<Button variant="outline">Top</Button>
										</Tooltip>
										<Tooltip text="This is a tooltip on right" side="right">
											<Button variant="outline">Right</Button>
										</Tooltip>
										<Tooltip text="This is a tooltip on bottom" side="bottom">
											<Button variant="outline">Bottom</Button>
										</Tooltip>
										<Tooltip text="This is a tooltip on left" side="left">
											<Button variant="outline">Left</Button>
										</Tooltip>
									</div>
								</div>
							</Card>

							<!-- Toggle (as overlay behavior) -->
							<Card title="Toggle States" class="p-6">
								<div class="space-y-4">
									<p class="text-sm text-muted-foreground">Interactive toggle states</p>
									<div class="space-y-3">
										<div class="flex items-center justify-between">
											<Label>Show advanced options</Label>
											<Toggle>Advanced</Toggle>
										</div>
										<div class="flex items-center justify-between">
											<Label>Enable expert mode</Label>
											<Toggle pressed>Expert</Toggle>
										</div>
										<div class="flex items-center justify-between">
											<Label>Auto-save changes</Label>
											<Toggle>Auto-save</Toggle>
										</div>
									</div>
								</div>
							</Card>
						</div>
					</div>
				</div>
			</div>
		</Tabs>
	</main>

</Layout>

<script>
  // Setup mode toggle functionality
  let toggleSetupComplete = false;
  
  function setupModeToggle() {
    console.log('üéØ Setting up mode toggle...');
    
    // Listen for theme-core-ready event (primary method)
    window.addEventListener('theme-core-ready', (event: any) => {
      console.log('üì° Received theme-core-ready event');
      const themeCore = event.detail?.themeCore || (window as any).themeCore;
      if (themeCore?.themeManager && !toggleSetupComplete) {
        setupModeToggleWithCore(themeCore);
      }
    });
    
    // Single fallback check in case event already fired
    setTimeout(() => {
      if (!toggleSetupComplete) {
        const themeCore = (window as any).themeCore;
        if (themeCore?.themeManager) {
          console.log('‚ö° ThemeCore already available (fallback)');
          setupModeToggleWithCore(themeCore);
        }
      }
    }, 100);
  }
  
  function setupModeToggleWithCore(themeCore: any) {
    if (toggleSetupComplete) return;
    toggleSetupComplete = true;
    
    console.log('üîß Setting up mode toggle with ThemeCore');
    
    const modeToggle = document.getElementById('mode-toggle');
    const lightIcon = document.getElementById('light-icon');
    const darkIcon = document.getElementById('dark-icon');
    const autoIcon = document.getElementById('auto-icon');
    
    if (!modeToggle || !themeCore?.themeManager) {
      console.error('‚ùå Mode toggle button or themeManager not found');
      return;
    }
    
    function updateModeIcon(mode: string) {
      [lightIcon, darkIcon, autoIcon].forEach(icon => icon?.classList.add('hidden'));
      const iconMap: { [key: string]: HTMLElement | null } = { light: lightIcon, dark: darkIcon, auto: autoIcon };
      iconMap[mode]?.classList.remove('hidden');
    }
    
    async function toggleMode() {
      console.log('üîÑ Toggle clicked, switching mode...');
      try {
        await themeCore.themeManager.toggleMode();
        const newMode = themeCore.themeManager.getCurrentMode();
        updateModeIcon(newMode);
        console.log(`‚úÖ Switched to mode: ${newMode}`);
      } catch (error) {
        console.error('‚ùå Error toggling mode:', error);
      }
    }
    
    // Set initial icon and add event listener
    const currentMode = themeCore.themeManager.getCurrentMode();
    updateModeIcon(currentMode);
    modeToggle.addEventListener('click', toggleMode);
    
    console.log('‚úÖ Mode toggle setup complete');
  }
  
  // Run when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupModeToggle);
  } else {
    // DOM already loaded
    setupModeToggle();
  }
</script>

<style>
  .benchmark-grid {
    display: grid;
    gap: 1rem;
    grid-template-columns: 1fr;
  }
  
  @media (min-width: 768px) {
    .benchmark-grid {
      grid-template-columns: 1fr;
    }
  }
</style>