---
export interface Props {
  variant?: 'default' | 'destructive' | 'success' | 'warning' | 'error';
  title?: string;
  description?: string;
  class?: string;
}

const { 
  variant = "default", 
  title, 
  description, 
  class: className = "" 
} = Astro.props;

// Basecoat Alert classes - map semantic variants to available classes
let alertClass = 'alert';
if (variant === 'destructive' || variant === 'error') {
  alertClass = 'alert-destructive';
} else if (variant === 'success' || variant === 'warning') {
  // For now, map success/warning to default until we have specific classes
  alertClass = 'alert';
}
---

<div class={`${alertClass} ${className}`.trim()}>
  <!-- Icon slot con icono por defecto -->
  <slot name="icon">
    {variant === 'destructive' ? (
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="15" y1="9" x2="9" y2="15"></line>
        <line x1="9" y1="9" x2="15" y2="15"></line>
      </svg>
    ) : (
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <circle cx="12" cy="12" r="10"></circle>
        <path d="m9 12 2 2 4-4"></path>
      </svg>
    )}
  </slot>
  
  <!-- Título usando h2 como especifica Basecoat -->
  {title && <h2>{title}</h2>}
  
  <!-- Descripción usando section como especifica Basecoat -->
  {description && <section>{description}</section>}
  
  <!-- Contenido adicional -->
  <slot />
</div>