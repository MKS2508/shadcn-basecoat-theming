---
export interface Tab {
  id: string;
  label: string;
  active?: boolean;
}

export interface Props {
  id: string;
  tabs: Tab[];
  class?: string;
}

const { id, tabs, class: className = '' } = Astro.props;
---

<div class={`simple-tabs ${className}`.trim()} data-tabs={id}>
  <!-- Tab List -->
  <div class="flex border-b" role="tablist" aria-label="Tabs">
    {tabs.map((tab, index) => (
      <button
        type="button"
        role="tab"
        id={`${id}-tab-${index + 1}`}
        aria-controls={`${id}-panel-${index + 1}`}
        aria-selected={tab.active ? 'true' : 'false'}
        data-tab-index={index}
        class={`px-4 py-2 text-sm font-medium border-b-2 transition-colors ${
          tab.active 
            ? 'border-primary text-primary' 
            : 'border-transparent text-muted-foreground hover:text-foreground hover:border-muted'
        }`}
      >
        {tab.label}
      </button>
    ))}
  </div>

  <!-- Tab Panels -->
  <div class="mt-4">
    <div
      role="tabpanel"
      id={`${id}-panel-1`}
      aria-labelledby={`${id}-tab-1`}
      tabindex="-1"
      class={`tab-panel ${!tabs[0]?.active ? 'hidden' : ''}`}
      data-tab-panel="0"
    >
      <slot name="panel-1" />
    </div>
    <div
      role="tabpanel"
      id={`${id}-panel-2`}
      aria-labelledby={`${id}-tab-2`}
      tabindex="-1"
      class={`tab-panel ${!tabs[1]?.active ? 'hidden' : ''}`}
      data-tab-panel="1"
    >
      <slot name="panel-2" />
    </div>
  </div>
</div>

<script define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const tabContainer = document.querySelector(`[data-tabs="${id}"]`);
    if (!tabContainer) return;

    const tabs = tabContainer.querySelectorAll('[role="tab"]');
    const panels = tabContainer.querySelectorAll('[role="tabpanel"]');

    tabs.forEach((tab, index) => {
      tab.addEventListener('click', () => {
        // Remove active states
        tabs.forEach((t, i) => {
          t.setAttribute('aria-selected', 'false');
          t.classList.remove('border-primary', 'text-primary');
          t.classList.add('border-transparent', 'text-muted-foreground');
          panels[i].classList.add('hidden');
        });

        // Add active state to clicked tab
        tab.setAttribute('aria-selected', 'true');
        tab.classList.add('border-primary', 'text-primary');
        tab.classList.remove('border-transparent', 'text-muted-foreground');
        panels[index].classList.remove('hidden');
      });
    });
  });
</script>