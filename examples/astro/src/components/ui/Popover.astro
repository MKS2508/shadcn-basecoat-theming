---
export interface Props {
  id: string;
  triggerId: string;
  class?: string;
  popoverClass?: string;
  triggerClass?: string;
}

const { id, triggerId, class: className = "", popoverClass: popoverClassName = "", triggerClass: triggerClassName = "" } = Astro.props;
---

<div id={id} class={`popover ${className}`.trim()}>
  <button 
    id={triggerId} 
    type="button" 
    aria-expanded="false" 
    aria-controls={`${id}-popover`}
    popovertarget={`${id}-popover`}
    class={`btn-outline ${triggerClassName}`.trim()}
  >
    <slot name="trigger" />
  </button>
  
  <div 
    id={`${id}-popover`}
    data-popover 
    aria-hidden="true" 
    class={`absolute top-full mt-1 ${popoverClassName || "w-80"}`.trim()}
  >
    <div class="grid gap-4">
      <slot />
    </div>
  </div>
</div>

<script define:vars={{ id, triggerId }}>
  document.addEventListener('DOMContentLoaded', () => {
    const trigger = document.getElementById(triggerId);
    const popover = document.getElementById(`${id}-popover`);
    const chevron = trigger?.querySelector('svg[viewBox="0 0 24 24"] path[d*="M19 9l-7 7-7-7"]')?.parentElement;
    
    if (trigger && popover && chevron) {
      // Observer for popover visibility changes
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'aria-hidden') {
            const isOpen = popover.getAttribute('aria-hidden') === 'false';
            chevron.style.transform = isOpen ? 'rotate(180deg)' : 'rotate(0deg)';
            trigger.setAttribute('aria-expanded', isOpen.toString());
          }
        });
      });
      
      observer.observe(popover, {
        attributes: true,
        attributeFilter: ['aria-hidden']
      });
      
      // Handle popover show/hide events
      popover.addEventListener('toggle', (event) => {
        const isOpen = event.newState === 'open';
        chevron.style.transform = isOpen ? 'rotate(180deg)' : 'rotate(0deg)';
        trigger.setAttribute('aria-expanded', isOpen.toString());
        popover.setAttribute('aria-hidden', (!isOpen).toString());
      });
    }
  });
</script>