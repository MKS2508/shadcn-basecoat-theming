---
export interface SelectOption {
  value: string;
  label: string;
}

export interface Props {
  id?: string;
  options: SelectOption[];
  placeholder?: string;
  defaultValue?: string;
  name?: string;
  width?: string;
  class?: string;
  [key: string]: any;
}

const { 
  id,
  options,
  placeholder = "Select an option...",
  defaultValue,
  name,
  width = "180px",
  class: className = "",
  ...restProps
} = Astro.props;

// Generar IDs Ãºnicos para evitar colisiones
const selectId = id || `select-${Math.random().toString(36).substring(2, 11)}`;
const triggerId = `${selectId}-trigger`;
const popoverId = `${selectId}-popover`;
const listboxId = `${selectId}-listbox`;

// Determinar el valor y etiqueta por defecto
let defaultLabel = placeholder;
if (defaultValue) {
  const foundOption = options.find(opt => opt.value === defaultValue);
  if (foundOption) {
    defaultLabel = foundOption.label;
  }
}
---

<div id={selectId} class={`select ${className}`.trim()} {...restProps}>
  <!-- Input oculto para formularios -->
  <input 
    type="hidden" 
    name={name}
    value={defaultValue || ""} 
  />
  
  <button 
    type="button" 
    class="btn-outline"
    style={`width: ${width}`}
    id={triggerId}
    aria-haspopup="listbox" 
    aria-expanded="false" 
    aria-controls={listboxId}
  >
    <span class="truncate">{defaultLabel}</span>
    <svg 
      xmlns="http://www.w3.org/2000/svg" 
      width="16" 
      height="16" 
      viewBox="0 0 24 24" 
      fill="none" 
      stroke="currentColor" 
      stroke-width="2" 
      stroke-linecap="round" 
      stroke-linejoin="round" 
      class="ml-auto opacity-50"
    >
      <path d="m7 15 5 5 5-5"></path>
      <path d="m7 9 5-5 5 5"></path>
    </svg>
  </button>

  <div id={popoverId} data-popover aria-hidden="true">
    <div 
      role="listbox" 
      id={listboxId} 
      aria-orientation="vertical" 
      aria-labelledby={triggerId}
    >
      {options.map((option, index) => (
        <div 
          id={`${selectId}-item-${index}`}
          role="option" 
          data-value={option.value}
          aria-selected={defaultValue === option.value ? "true" : "false"}
        >
          {option.label}
        </div>
      ))}
    </div>
  </div>
</div>