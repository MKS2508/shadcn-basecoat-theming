---
// Simple Astro benchmark component
---

<div class="benchmark-container">
  <h3>🔥 Performance Benchmark (Astro)</h3>
  
  <div class="button-group">
    <button id="run-benchmark">🔥 Run Benchmark</button>
    <button id="export-results" style="display: none;">💾 Export Results</button>
  </div>
  
  <div id="status" class="status-message"></div>
  <div id="benchmark-results" class="results-container" style="display: none;"></div>
</div>

<script>
  let benchmarkResults: any = null;
  
  const runButton = document.getElementById('run-benchmark') as HTMLButtonElement;
  const exportButton = document.getElementById('export-results') as HTMLButtonElement;
  const statusDiv = document.getElementById('status') as HTMLDivElement;
  const resultsDiv = document.getElementById('benchmark-results') as HTMLDivElement;
  
  runButton?.addEventListener('click', async () => {
    console.log('🚀 Starting Astro benchmark...');
    
    // Get ThemeCore instance
    const themeCore = (window as any).themeCore;
    if (!themeCore) {
      statusDiv.textContent = '❌ ThemeCore not available';
      statusDiv.style.color = 'var(--destructive)';
      return;
    }
    
    // Disable button and show status
    runButton.disabled = true;
    runButton.textContent = '⏳ Running Benchmark...';
    statusDiv.textContent = '🔄 Running benchmark tests...';
    statusDiv.style.color = 'var(--muted-foreground)';
    resultsDiv.style.display = 'none';
    exportButton.style.display = 'none';
    
    try {
      // Reset performance tracker
      (window as any).PerformanceTracker?.reset();
      
      // Test theme switches with available themes
      const themes = ['default', 'supabase'];
      const modes = ['light', 'dark'] as const;
      
      // Run multiple iterations for better average
      for (let iteration = 0; iteration < 2; iteration++) {
        console.log(`📊 Astro Iteration ${iteration + 1}`);
        
        for (const theme of themes) {
          for (const mode of modes) {
            try {
              await themeCore.themeManager.setTheme(theme, mode);
              // Small delay to let UI update
              await new Promise(resolve => setTimeout(resolve, 50));
            } catch (error) {
              console.warn(`Failed to apply ${theme}-${mode}:`, error);
            }
          }
        }
      }
      
      // Get results
      const stats = (window as any).PerformanceTracker?.getAllStats();
      benchmarkResults = {
        framework: 'Astro',
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        results: stats
      };
      
      // Display results
      resultsDiv.innerHTML = `
        <h4>📊 Benchmark Results:</h4>
        <pre>${JSON.stringify(stats, null, 2)}</pre>
        <div class="console-note">💡 Check browser console for detailed timing logs</div>
      `;
      resultsDiv.style.display = 'block';
      exportButton.style.display = 'inline-block';
      
      statusDiv.textContent = '✅ Benchmark completed successfully';
      statusDiv.style.color = 'var(--success)';
      
      console.log('📊 Astro Benchmark Results:', stats);
      
    } catch (error) {
      console.error('❌ Astro benchmark failed:', error);
      statusDiv.textContent = '❌ Benchmark failed - check console for details';
      statusDiv.style.color = 'var(--destructive)';
    } finally {
      runButton.disabled = false;
      runButton.textContent = '🔥 Run Benchmark';
    }
  });
  
  exportButton?.addEventListener('click', () => {
    if (!benchmarkResults) return;
    
    const dataStr = JSON.stringify(benchmarkResults, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `astro-theme-benchmark-${Date.now()}.json`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    console.log('📁 Benchmark results exported');
  });
</script>

<style>
  .benchmark-container {
    padding: 1rem;
    border: 2px solid var(--border);
    border-radius: 8px;
    margin: 1rem 0;
    background-color: var(--card);
  }
  
  .benchmark-container h3 {
    margin: 0 0 1rem 0;
    color: var(--foreground);
  }
  
  .button-group {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .benchmark-container button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
  }
  
  #run-benchmark {
    background: var(--primary);
    color: var(--primary-foreground);
  }
  
  #run-benchmark:disabled {
    background: var(--muted);
    color: var(--muted-foreground);
    cursor: not-allowed;
  }
  
  #export-results {
    background: var(--secondary);
    color: var(--secondary-foreground);
  }
  
  .benchmark-container button:hover:not(:disabled) {
    opacity: 0.9;
    transform: translateY(-1px);
  }
  
  .status-message {
    font-size: 14px;
    margin-bottom: 0.5rem;
    font-style: italic;
  }
  
  .results-container {
    margin-top: 1rem;
  }
  
  .results-container h4 {
    margin: 0 0 0.5rem 0;
    color: var(--foreground);
  }
  
  .results-container pre {
    background: var(--muted);
    color: var(--muted-foreground);
    padding: 1rem;
    border-radius: 4px;
    font-size: 12px;
    overflow: auto;
    margin: 0 0 0.5rem 0;
    border: 1px solid var(--border);
  }
  
  .console-note {
    font-size: 12px;
    color: var(--muted-foreground);
    font-style: italic;
  }
</style>