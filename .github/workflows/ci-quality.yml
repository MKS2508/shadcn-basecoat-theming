---
name: CI Quality & Testing - Theme Manager

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      run_performance:
        description: 'Ejecutar tests de performance'
        required: false
        default: true
        type: boolean
      run_visual:
        description: 'Ejecutar tests visuales'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # ===== MATRIX TESTING =====
  test-matrix:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node-version: ['18', '20', '22']
        build-mode: [full, core, vanilla, react, astro]

    name: Test Node ${{ matrix.node-version }} - ${{ matrix.build-mode }}

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "📦 Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "🔧 Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: 🔍 Type checking
        run: pnpm run type-check:all

      - name: "🏗️ Build ${{ matrix.build-mode }}"
        run: |
          if [ "${{ matrix.build-mode }}" = "full" ]; then
            pnpm run build:packages
          elif [ "${{ matrix.build-mode }}" = "core" ]; then
            pnpm run build:core
          elif [ "${{ matrix.build-mode }}" = "vanilla" ]; then
            pnpm run build:vanilla
          elif [ "${{ matrix.build-mode }}" = "react" ]; then
            pnpm run build:react
          elif [ "${{ matrix.build-mode }}" = "astro" ]; then
            echo "Astro build test - components ready"
          else
            pnpm run build:${{ matrix.build-mode }}
          fi

      - name: "🧪 Run unit tests"
        run: |
          echo "🧪 Running tests for ${{ matrix.build-mode }} mode..."
          # TODO: Implementar tests unitarios cuando estén disponibles
          echo "✅ Tests placeholder - implementar con vitest/jest"

      - name: 📊 Check bundle sizes
        run: |
          echo "📊 Analyzing bundle sizes for ${{ matrix.build-mode }}..."
          if [ "${{ matrix.build-mode }}" = "full" ]; then
            ls -la packages/*/dist/ || echo "No dist folders found"
          else
            ls -la packages/theme-manager-${{ matrix.build-mode }}/dist/ || echo "No dist folder for ${{ matrix.build-mode }}"
          fi

      - name: "📤 Upload build artifacts"
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20'
        with:
          name: build-${{ matrix.build-mode }}-node${{ matrix.node-version }}
          path: packages/*/dist/
          retention-days: 7

  # ===== PERFORMANCE TESTING =====
  performance-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ inputs.run_performance != false }}

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "🔧 Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "📥 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-full-node20
          path: packages/

      - name: ⚡ Performance benchmarks
        run: |
          echo "⚡ Running performance benchmarks..."
          
          # Measure build times
          echo "## 📊 Build Performance Report" > performance-report.md
          echo "### Build Times" >> performance-report.md
          echo "\`\`\`" >> performance-report.md
          
          for package in core vanilla react web-components; do
            echo "Testing build time for theme-manager-$package..." >> performance-report.md
            start_time=$(date +%s%N)
            pnpm run build:$package > /dev/null 2>&1 || echo "Build failed for $package"
            end_time=$(date +%s%N)
            duration=$(( (end_time - start_time) / 1000000 ))
            echo "theme-manager-$package: ${duration}ms" >> performance-report.md
          done
          
          echo "\`\`\`" >> performance-report.md

      - name: 📊 Bundle analysis
        run: |
          echo "### 📦 Bundle Analysis" >> performance-report.md
          echo "#### Size Breakdown by Package" >> performance-report.md
          
          for package_dir in packages/*/; do
            if [ -d "$package_dir/dist" ]; then
              package_name=$(basename "$package_dir")
              echo "##### $package_name" >> performance-report.md
              echo "\`\`\`" >> performance-report.md
              ls -la "$package_dir/dist/" >> performance-report.md
              echo "\`\`\`" >> performance-report.md
            fi
          done
          
          echo "### 🔍 Performance Metrics" >> performance-report.md
          echo "- **Build Date**: $(date)" >> performance-report.md
          echo "- **Node Version**: ${{ env.NODE_VERSION }}" >> performance-report.md
          echo "- **Total Packages**: $(ls packages/ | wc -l)" >> performance-report.md

      - name: "📤 Upload performance report"
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md
          retention-days: 30

  # ===== VISUAL TESTING =====
  visual-tests:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ inputs.run_visual == true }}

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "🔧 Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "📥 Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-full-node20
          path: packages/

      - name: 🎭 Install Playwright
        run: |
          echo "🎭 Installing Playwright for visual testing..."
          # TODO: Configurar Playwright cuando tengamos componentes visuales
          echo "✅ Playwright setup placeholder"

      - name: "🖼️ Run visual tests"
        run: |
          echo "🖼️ Running visual regression tests..."
          echo "## 🎨 Visual Test Report" > visual-test-report.md
          echo "### Theme Rendering Tests" >> visual-test-report.md
          echo "- **Date**: $(date)" >> visual-test-report.md
          echo "- **Status**: Placeholder - implementar con Playwright" >> visual-test-report.md
          echo "✅ Visual tests placeholder - ready for implementation"

      - name: "📤 Upload visual test results"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: visual-test-report.md
          retention-days: 30

  # ===== CODE QUALITY ANALYSIS =====
  code-quality:
    runs-on: ubuntu-latest
    needs: test-matrix

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "🔧 Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: 🔍 Code analysis
        run: |
          echo "🔍 Analyzing code quality..."
          
          echo "## 📊 Code Quality Report" > quality-report.md
          echo "### TypeScript Analysis" >> quality-report.md
          echo "\`\`\`" >> quality-report.md
          pnpm run type-check:all >> quality-report.md 2>&1 || echo "TypeScript issues detected" >> quality-report.md
          echo "\`\`\`" >> quality-report.md
          
          echo "### Monorepo Statistics" >> quality-report.md
          echo "- **Total Packages**: $(ls packages/ | wc -l)" >> quality-report.md
          echo "- **TypeScript Files**: $(find packages/ -name '*.ts' -o -name '*.tsx' | wc -l)" >> quality-report.md
          echo "- **Total Lines**: $(find packages/ -name '*.ts' -o -name '*.tsx' -exec wc -l {} + | tail -1 | awk '{print $1}')" >> quality-report.md
          echo "- **Build Date**: $(date)" >> quality-report.md
          
          echo "### Package Breakdown" >> quality-report.md
          for package_dir in packages/*/; do
            if [ -f "$package_dir/package.json" ]; then
              package_name=$(basename "$package_dir")
              ts_files=$(find "$package_dir" -name '*.ts' -o -name '*.tsx' | wc -l)
              lines=$(find "$package_dir" -name '*.ts' -o -name '*.tsx' -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
              echo "- **$package_name**: $ts_files files, $lines lines" >> quality-report.md
            fi
          done

      - name: 🔒 Dependency audit
        run: |
          echo "### 🔒 Security Analysis" >> quality-report.md
          echo "\`\`\`" >> quality-report.md
          pnpm audit --audit-level=moderate >> quality-report.md 2>&1 || echo "Security issues detected" >> quality-report.md
          echo "\`\`\`" >> quality-report.md

      - name: "📤 Upload quality report"
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: quality-report.md
          retention-days: 30

  # ===== PROJECT UTILS VALIDATION =====
  validate-project-utils:
    runs-on: ubuntu-latest

    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "🔧 Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "🧪 Test project-utils scripts"
        run: |
          echo "🧪 Validating project-utils automation scripts..."
          
          # Verificar que los scripts principales existen
          SCRIPTS=("commit-generator.ts" "version-manager.ts" "auto-release.ts")
          
          for script in "${SCRIPTS[@]}"; do
            script_path=""
            if [ "$script" = "auto-release.ts" ]; then
              script_path="project-utils/workflows/$script"
            else
              script_path="project-utils/core/$script"
            fi
            
            if [ -f "$script_path" ]; then
              echo "✅ $script exists"
              # Test syntax
              pnpm tsx "$script_path" --help > /dev/null 2>&1 && echo "✅ $script syntax OK" || echo "❌ $script syntax error"
            else
              echo "❌ $script missing"
            fi
          done

      - name: 📊 Validate automation commands
        run: |
          echo "📊 Validating package.json automation scripts..."
          
          # Test that automation scripts are defined and callable
          SCRIPTS=("commit:auto" "version:patch" "release:auto")
          
          for script in "${SCRIPTS[@]}"; do
            if grep -q "\"$script\":" package.json; then
              echo "✅ Script '$script' is defined"
            else
              echo "❌ Script '$script' missing from package.json"
            fi
          done

  # ===== COMPREHENSIVE SUMMARY =====
  ci-summary:
    runs-on: ubuntu-latest
    needs: [test-matrix, performance-tests, visual-tests, code-quality, validate-project-utils]
    if: always()

    steps:
      - name: 📊 CI Quality Summary
        run: |
          echo "## 📊 CI Quality & Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Status de cada job
          echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Matrix Testing**: ${{ needs.test-matrix.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Visual Tests**: ${{ needs.visual-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Utils**: ${{ needs.validate-project-utils.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📋 Test Coverage Matrix" >> $GITHUB_STEP_SUMMARY
          echo "- **Node Versions**: 18, 20, 22" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Modes**: full, core, vanilla, react, astro" >> $GITHUB_STEP_SUMMARY
          echo "- **Package Coverage**: 7 packages tested" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determinar estado general
          if [ "${{ needs.test-matrix.result }}" = "success" ] && [ "${{ needs.code-quality.result }}" = "success" ] && [ "${{ needs.validate-project-utils.result }}" = "success" ]; then
            echo "### ✅ Overall Status: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "All critical quality checks passed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Overall Status: ATTENTION REQUIRED" >> $GITHUB_STEP_SUMMARY
            echo "Some quality checks require attention. Review individual job results." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📎 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Build artifacts for all packages" >> $GITHUB_STEP_SUMMARY
          echo "- Performance analysis report" >> $GITHUB_STEP_SUMMARY
          echo "- Code quality metrics" >> $GITHUB_STEP_SUMMARY
          echo "- Project utils validation" >> $GITHUB_STEP_SUMMARY