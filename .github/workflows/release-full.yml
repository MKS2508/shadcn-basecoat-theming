---
name: Release Full - Theme Manager

on:
  push:
    branches: [master]
    paths:
      - 'packages/**'
      - 'project-utils/**'
      - 'package.json'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Tipo de release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      version_prefix:
        description: 'Prefijo de versión'
        required: false
        default: ''
        type: choice
        options:
          - ''
          - alpha
          - beta
          - rc
      publish_npm:
        description: 'Publicar en NPM'
        required: false
        default: true
        type: boolean
      publish_github:
        description: 'Crear GitHub Release'
        required: false
        default: false
        type: boolean
      skip_build:
        description: 'Omitir build (solo para testing)'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (no ejecutar cambios reales)'
        required: false
        default: false
        type: boolean
      enable_ai:
        description: 'Habilitar análisis AI para commits'
        required: false
        default: true
        type: boolean
      force_release:
        description: 'Forzar release aunque no haya cambios'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  # ===== VALIDATION & PREPARATION =====
  validate:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check-changes.outputs.should_release }}
      release_type: ${{ steps.determine-type.outputs.release_type }}
      version_prefix: ${{ steps.determine-type.outputs.version_prefix }}
    
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "🔧 Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "🔍 Check for changes requiring release"
        id: check-changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ inputs.force_release }}" = "true" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "📋 Manual dispatch or force release - proceeding"
          else
            # Check if there are changes in packages since last release tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "📋 No previous tags - first release"
            else
              CHANGES=$(git diff --name-only $LAST_TAG..HEAD | grep -E "^packages/|^project-utils/|^package\.json$" || true)
              if [ -n "$CHANGES" ]; then
                echo "should_release=true" >> $GITHUB_OUTPUT
                echo "📋 Changes detected since $LAST_TAG:"
                echo "$CHANGES"
                
                # Advanced change analysis
                echo "### 📊 Change Analysis" >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                git diff --stat $LAST_TAG..HEAD -- packages/ project-utils/ package.json >> $GITHUB_STEP_SUMMARY
                echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
                
                # Analyze change types
                FEAT_CHANGES=$(git log --oneline $LAST_TAG..HEAD | grep -c "^[a-f0-9]* feat" || echo "0")
                FIX_CHANGES=$(git log --oneline $LAST_TAG..HEAD | grep -c "^[a-f0-9]* fix" || echo "0")
                echo "- **Feature changes**: $FEAT_CHANGES" >> $GITHUB_STEP_SUMMARY
                echo "- **Bug fixes**: $FIX_CHANGES" >> $GITHUB_STEP_SUMMARY
              else
                echo "should_release=false" >> $GITHUB_OUTPUT
                echo "📋 No package changes since $LAST_TAG - skipping release"
              fi
            fi
          fi

      - name: "🎯 Determine release parameters"
        id: determine-type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "release_type=${{ inputs.release_type }}" >> $GITHUB_OUTPUT
            echo "version_prefix=${{ inputs.version_prefix }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect release type from commit messages since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")
            COMMITS=$(git log --oneline $LAST_TAG..HEAD)
            
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|feat!"; then
              echo "release_type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^feat"; then
              echo "release_type=minor" >> $GITHUB_OUTPUT
            else
              echo "release_type=patch" >> $GITHUB_OUTPUT
            fi
            echo "version_prefix=" >> $GITHUB_OUTPUT
          fi

      - name: "📊 Validation summary"
        run: |
          echo "## 📊 Release Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Should Release**: ${{ steps.check-changes.outputs.should_release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Type**: ${{ steps.determine-type.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Prefix**: ${{ steps.determine-type.outputs.version_prefix || 'stable' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

  # ===== AUTOMATED RELEASE =====
  release:
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_release == 'true'
    
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "📦 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "📦 Setup pnpm"
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: "🔧 Install dependencies"
        run: pnpm install --frozen-lockfile

      - name: "🔑 Configure git user"
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: "🔑 Setup NPM authentication"
        if: ${{ inputs.publish_npm != false }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc
          echo "access=public" >> ~/.npmrc
          npm whoami
          
          # Verify GitHub registry access 
          echo "Verifying GitHub Packages access..."
          npm ping --registry=https://npm.pkg.github.com || echo "GitHub Packages registry not accessible"

      - name: "🧠 AI-powered pre-release analysis"
        if: ${{ inputs.enable_ai == true }}
        env:
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        run: |
          echo "🧠 Running AI analysis for release planning..."
          if [ -n "${{ secrets.GOOGLE_AI_API_KEY }}" ]; then
            # Generate intelligent commit if needed
            echo "📝 AI commit analysis..."
            pnpm tsx project-utils/core/commit-generator.ts --auto-approve || echo "⚠️ AI commit failed, continuing"
            
            # AI release notes generation
            echo "📋 AI release notes generation..."
            pnpm tsx project-utils/ai/generate-release-notes.ts --version="${{ needs.validate.outputs.release_type }}" || echo "⚠️ AI release notes failed, continuing"
          else
            echo "⚠️ GOOGLE_AI_API_KEY not set, skipping AI analysis"
          fi

      - name: "🔍 Pre-release validation"
        run: |
          echo "🔍 Running comprehensive pre-release validation..."
          
          # Check workspace consistency
          echo "### 🔍 Pre-Release Validation" >> $GITHUB_STEP_SUMMARY
          
          # Verify all packages have consistent dependencies
          echo "Checking workspace dependencies..." >> $GITHUB_STEP_SUMMARY
          WORKSPACE_ISSUES=0
          
          for package_json in packages/*/package.json; do
            if [ -f "$package_json" ]; then
              package_name=$(dirname "$package_json" | xargs basename)
              workspace_deps=$(grep -c "workspace:" "$package_json" 2>/dev/null || echo "0")
              echo "- **$package_name**: $workspace_deps workspace deps" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "✅ Workspace validation completed" >> $GITHUB_STEP_SUMMARY

      - name: "🚀 Execute auto-release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
        run: |
          # Build release command based on inputs/auto-detection
          RELEASE_CMD="pnpm tsx project-utils/workflows/auto-release.ts"
          RELEASE_CMD="$RELEASE_CMD --type=${{ needs.validate.outputs.release_type }}"
          
          if [ -n "${{ needs.validate.outputs.version_prefix }}" ]; then
            RELEASE_CMD="$RELEASE_CMD --prefix=${{ needs.validate.outputs.version_prefix }}"
          fi
          
          if [ "${{ inputs.publish_npm }}" != "false" ]; then
            RELEASE_CMD="$RELEASE_CMD --publish-npm"
          fi
          
          if [ "${{ inputs.publish_github }}" = "true" ]; then
            RELEASE_CMD="$RELEASE_CMD --publish-github"
          fi
          
          # Force publish to both registries for major releases
          if [ "${{ needs.validate.outputs.release_type }}" = "major" ]; then
            RELEASE_CMD="$RELEASE_CMD --publish-github"
          fi
          
          if [ "${{ inputs.skip_build }}" = "true" ]; then
            RELEASE_CMD="$RELEASE_CMD --skip-build"
          fi
          
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            RELEASE_CMD="$RELEASE_CMD --dry-run"
          fi
          
          # Skip commit if we already did AI commit
          if [ "${{ inputs.enable_ai }}" = "true" ] && [ -n "${{ secrets.GOOGLE_AI_API_KEY }}" ]; then
            RELEASE_CMD="$RELEASE_CMD --skip-commit"
          fi
          
          RELEASE_CMD="$RELEASE_CMD --auto-approve"
          
          echo "🚀 Executing: $RELEASE_CMD"
          eval $RELEASE_CMD

      - name: "📊 Post-release analysis"
        if: always()
        run: |
          echo "📊 Generating post-release analysis..."
          
          # Get the latest release info
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            echo "### 📦 Release Analysis: $LATEST_TAG" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Package sizes
            echo "#### 📏 Package Sizes" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            for package_dir in packages/*/dist/; do
              if [ -d "$package_dir" ]; then
                package_name=$(echo "$package_dir" | cut -d'/' -f2)
                size=$(du -sh "$package_dir" | cut -f1)
                echo "$package_name: $size" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            
            # Commit summary since last release
            PREV_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^1 2>/dev/null || echo "")
            if [ -n "$PREV_TAG" ]; then
              echo "#### 📝 Changes from $PREV_TAG to $LATEST_TAG" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              git log --oneline $PREV_TAG..$LATEST_TAG >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: "📊 Release summary"
        if: always()
        run: |
          echo "## 🚀 Release Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ needs.validate.outputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Prefix**: ${{ needs.validate.outputs.version_prefix || 'stable' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **NPM Publish**: ${{ inputs.publish_npm != false }}" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: ${{ inputs.publish_github }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show latest release info if successful
          if [ "${{ job.status }}" = "success" ] && [ "${{ inputs.dry_run }}" != "true" ]; then
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LATEST_TAG" ]; then
              echo "### 🎯 Latest Release: $LATEST_TAG" >> $GITHUB_STEP_SUMMARY
              echo "- **Commit**: $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
              echo "- **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  # ===== NOTIFICATION =====
  notify:
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: always()
    
    steps:
      - name: "📢 Success notification"
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release completed successfully!"
          echo "🎯 Release Type: ${{ needs.validate.outputs.release_type }}"
          echo "📦 Packages updated and published"

      - name: "🚨 Failure notification"
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          echo "🔍 Check logs for details"
          echo "📋 Release Type: ${{ needs.validate.outputs.release_type }}"
          exit 1

      - name: "⏭️ Skipped notification"
        if: needs.validate.outputs.should_release == 'false'
        run: |
          echo "⏭️ Release skipped - no package changes detected"
          echo "📋 Use manual dispatch to force release if needed"